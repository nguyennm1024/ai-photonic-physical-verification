[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "ai-photonic-physical-verification"
version = "1.0.0"
description = "Interactive Layout Verification System with AI Analysis"
readme = "README.md"
requires-python = ">=3.9"
license = "MIT"
authors = [
    {name = "AI Photonic Physical Verification Team"}
]
keywords = ["photonic", "layout", "verification", "ai", "gds", "svg"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering",
    "Topic :: Scientific/Engineering :: Physics",
]

# Core Dependencies
dependencies = [
    # GDS File Processing
    "gdspy>=1.6.13",
    
    # Image Processing and Computer Vision
    "Pillow>=10.0.0",
    "numpy>=1.20.0",
    
    # Data Visualization and Plotting
    "matplotlib>=3.5.0",
    
    # AI/ML Integration - Google Gemini
    "google-generativeai>=0.8.0",
    
    # SVG Processing and Conversion
    "cairosvg>=2.7.0",
    "lxml>=4.9.0",
]

# Optional Dependencies
[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "black>=23.0.0",
    "flake8>=6.0.0",
    "mypy>=1.0.0",
    "isort>=5.12.0",
]

docs = [
    "sphinx>=5.0.0",
    "sphinx-rtd-theme>=1.0.0",
]

all = [
    "ai-photonic-physical-verification[dev,docs]"
]

[project.urls]
Homepage = "https://github.com/your-org/ai-photonic-physical-verification"
Repository = "https://github.com/your-org/ai-photonic-physical-verification.git"
Documentation = "https://ai-photonic-physical-verification.readthedocs.io/"
"Bug Tracker" = "https://github.com/your-org/ai-photonic-physical-verification/issues"

[project.scripts]
layout-verification = "main:main"

# Package Discovery
[tool.setuptools.packages.find]
include = ["core*", "ui*", "utils*"]
exclude = ["output*", "tests*", "scripts*"]

# Tool Configurations
[tool.black]
line-length = 88
target-version = ['py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["core", "ui", "utils"]
known_third_party = ["tkinter", "matplotlib", "gdspy", "google", "google.generativeai", "PIL", "numpy", "cv2", "xml", "re", "os", "sys", "threading", "queue", "dataclasses", "enum", "typing", "json", "time", "datetime", "pathlib", "shutil", "tempfile", "subprocess", "traceback", "logging"]
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]
default_section = "THIRDPARTY"

[tool.flake8]
max-line-length = 88
extend-ignore = ["E203", "W503", "E501", "D205"]
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    ".venv",
    ".eggs",
    "*.egg",
    ".mypy_cache",
    ".tox",
]
per-file-ignores = [
    "__init__.py:F401",
    "main.py:E501",  # Allow longer lines in main.py for UI setup
]

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "gdspy.*",
    "PIL.*",
    "matplotlib.*",
    "google.generativeai.*",
    "cairosvg.*",
    "lxml.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--cov=core",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["core", "ui", "utils"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/env/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
